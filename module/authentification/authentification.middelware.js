const e=require("express"),t=require("crypto"),r=require("../database/index.model"),o=require("../function/pwGestion.fn"),n=require("../error.list"),s=36e5;let a={},i=null;function u(e){console.log("delete token => "+e),delete a[e]}function d(e){return new Promise((t,o)=>{if(!a[e])return t();clearTimeout(a[e].timeout),a[e].timeout=setTimeout(u,36e5,e),r.User.findOne({where:{idUser:a[e].user}}).then(t)})}function c(e){return new Promise((r,o)=>{try{let o=Date.now().toString(),n=t.createHmac("sha512",o).update(Date.now().toString()+JSON.stringify(e)+Date.now()).digest("hex");o=Date.now().toString(),n=t.createHmac("sha512",o).update(Date.now().toString()+n+e.idUser+Date.now()).digest("hex"),o=Date.now().toString();let s=t.createHmac("sha512",o).update(Date.now().toString()+Math.random()+Date.now()).digest("hex"),i=n+Date.now()+s,d=t.createHmac("sha512",o).update(i).digest("hex");i=n+Date.now()+s+Date.now()+d;let c={};c.token=i,c.user=e.idUser,c.timeout=setTimeout(u,36e5,i),a[i]=c,r(i)}catch(e){o(e)}})}function h(){return new Promise((e,r)=>{try{let r=Date.now().toString(),o=t.createHmac("sha512",r).update(Date.now().toString()+Math.random()+Date.now()).digest("hex");i="temp_"+o+Date.now(),e(i)}catch(e){r(e)}})}function l(e,t){return r.User.count({}).then(s=>{if(s)return r.User.findOne({where:{userLogin:e.body.userLogin}}).then(r=>{if(r){let s=o.fHashPW(e.body.userPassword,r);if(r.userHash==s)return c(r).then(e=>{t.json({token:e})});throw Error(n.badPW)}throw Error(n.badLogin)});if("root"==e.body.userPassword&&"root"==e.body.userLogin)return h().then(e=>{t.json({token:e})});throw Error(n.badLogin)})}function w(e,t){return new Promise((t,r)=>{let o=e.headers.token;a[o]instanceof Object&&(clearTimeout(a[o].timeout),u(o)),t()})}let g=e.Router(),m=e.Router();m.post("/login",(e,t)=>{null!=e.body.userLogin&&null!=e.body.userPassword?l(e,t).catch(e=>{t.json({error:e.message})}):t.json({error:n.badData})}),m.use("/disconnect",(e,t)=>{w(e,t).then(()=>{t.json({result:"disconnected"})}).catch(e=>{t.json({error:e.message})})}),g.use("/authentification",m),g.use("/",(e,t,o)=>{let s=e.headers.token;if(i)if(i==s&&"POST"==e.method){let r=e.path.split("/");"user"==r[r.length-1]?(e.token=s,i=null,o()):t.json({error:n.badToken})}else t.json({error:n.badToken});else s?d(s).then(r=>{null==r?t.json({error:n.badToken}):(e.user=r,e.token=s,o())}).catch(e=>{"production"===process.env.NODE_ENV?t.json({error:"error"}):t.json({error:e.message})}):"production"===process.env.NODE_ENV?t.json({error:n.noAuth}):r.User.findOne({where:{}}).then(t=>{t?(e.user=t.id,e.psToken=null,o()):(e.user="",e.psToken=null,o())})}),module.exports=g;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
